@page "/editarviagem/{viagemId:int}"
@inject IViagemService viagemService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h3>Atualizar Viagem</h3>
<hr />
<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="destino" class="control-label">Destino da Viagem: </label>
                <input for="destino" class="form-control" @bind="@viagem.destino" />
            </div>
            <div class="form-group">
                <label for="dataPartida" class="control-label">Data de Partida: </label>
                <input for="dataPartida" class="form-control" @bind="@viagem.dataPartida" />
            </div>
            <div class="form-group">
                <label for="preco" class="control-label">Preço: </label>
                <input for="preco" class="form-control" @bind="@viagem.preco" />
            </div>
            <div class="form-group">
                <label for="lugaresLivres" class="control-label">Lugares Livres: </label>
                <input for="lugaresLivres" class="form-control" @bind="@viagem.lugaresLivres" />
            </div>
            <div class="form-group">
                <label for="gratuidades" class="control-label">Gratuidades: </label>
                <input for="gratuidades" class="form-control" @bind="@viagem.gratuidades" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary" @onclick="@AtualizaViagem" value="Atualizar" />
                <input type="button" class="btn btn-link" @onclick="@Cancela" value="Cancelar" />
            </div>
        </div>
    </div>
</form>


@code {
    [Parameter]
    public int viagemId { get; set; }

    ViagemResponse? V = new ViagemResponse();
    ViagemResponse viagem = new ViagemResponse();

    protected override async Task OnInitializedAsync()
    {
        V = await viagemService.GetViagem(viagemId);
        if (V == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Não foi possível localizar a viagem!");
            NavigationManager.NavigateTo("viagens");
        }
        else
        {
            viagem = V;
        }
    }

    void Cancela()
    {
        NavigationManager.NavigateTo("viagens");
    }

    protected async Task AtualizaViagem()
    {
        bool confirmar = await JsRuntime.InvokeAsync<bool>("confirm", "Deseja realmente modificar a viagem?");

        if (confirmar)
        {
            int result = await viagemService.PutViagem(viagem);
            if (result == 1)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Não foi possível modificar a viagem!");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Viagem modificada com sucesso!");
                NavigationManager.NavigateTo("viagens");
            }
        }
    }
}
